<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 配置 dao -->
    <bean id="accountDao" class="com.github.dao.impl.AccountDaoImpl"></bean>

    <!-- bean 标签：用于配置让 spring 创建对象，并且存入 ioc 容器之中
         id 属性：对象的唯一标识。
         class 属性：指定要创建对象的全限定类名
        -->
    <!-- 配置 service 第一种方式-->
    <!--<bean id="accountService" class="com.github.service.impl.AccountServiceImpl"></bean>-->
    <!-- 第二种方式 此种方式是:
    使用 StaticFactory 类中的静态方法 createAccountService 创建对象，并存入 spring 容器
    id 属性：指定 bean 的 id，用于从容器中获取
    class 属性：指定静态工厂的全限定类名
    factory-method 属性：指定生产对象的静态方法
    -->
    <!--<bean id="accountService"-->
          <!--class="com.github.dao.factory.StaticFactory"-->
          <!--factory-method="createAccountService"></bean>-->

    <!-- 第三种方式 是：
        先把工厂的创建交给 spring 来管理。
        然后在使用工厂的 bean 来调用里面的方法
        factory-bean 属性：用于指定实例工厂 bean 的 id。
        factory-method 属性：用于指定实例工厂中创建对象的方法。
        &ndash;&gt; -->
    <!--<bean id="instancFactory" class="com.github.dao.factory.InstanceFactory"></bean>-->
    <!--<bean id="accountService" factory-bean="instancFactory" factory-method="createAccountService"></bean>-->

    <!-- 使用构造函数的方式，给 service 中的属性传值
        要求：
        类中需要提供一个对应参数列表的构造函数。
        涉及的标签：
        constructor-arg
        属性：
        index:指定参数在构造函数参数列表的索引位置
        type:指定参数在构造函数中的数据类型
        name:指定参数在构造函数中的名称 用这个找给谁赋值
        =======上面三个都是找给谁赋值，下面两个指的是赋什么值的==============
        value:它能赋的值是基本数据类型和 String 类型
        ref:它能赋的值是其他 bean 类型，也就是说，必须得是在配置文件中配置过的 bean
        -->
    <!--<bean id="accountService" class="com.github.service.impl.AccountServiceImpl">-->
    <!--<constructor-arg name="name" value="张三"></constructor-arg>-->
    <!--<constructor-arg name="age" value="18"></constructor-arg>-->
    <!--<constructor-arg name="birthday" ref="now"></constructor-arg>-->
<!--</bean>-->
    <!--<bean id="now" class="java.util.Date"></bean>-->
    <!-- 通过配置文件给 bean 中的属性传值：使用 set 方法的方式
            涉及的标签：
            property
            属性：
            name：找的是类中 set 方法后面的部分
            ref：给属性赋值是其他 bean 类型的
            value：给属性赋值是基本数据类型和 string 类型的
            实际开发中，此种方式用的较多。
             -->
    <!--<bean id="accountService" class="com.github.service.impl.AccountServiceImpl" p:name="test" p:age="21" p:birthday-ref="now" >-->
    <!--</bean>-->
        <!--<bean id="now" class="java.util.Date"></bean>-->
    <!-- 注入集合数据
        List 结构的：
        array,list,set
        Map 结构的
        map,entry,props,prop
        -->
    <bean id="accountService" class="com.github.service.impl.AccountServiceImpl">
    <!-- 在注入集合数据时，只要结构相同，标签可以互换 -->
    <!-- 给数组注入数据 -->
        <property name="myStrs">
            <set><value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>
    <!-- 注入 list 集合数据 -->
        <property name="myList">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
             </array>
        </property>
    <!-- 注入 set 集合数据 -->
        <property name="mySet">
            <list>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </list>
        </property>
    <!-- 注入 Map 数据 -->
        <property name="myMap">
            <props>
                <prop key="testA">aaa</prop>
                <prop key="testB">bbb</prop>
            </props>
        </property>
    <!-- 注入 properties 数据 -->
    <property name="myProps">
        <map>
            <entry key="testA" value="aaa"></entry>
            <entry key="testB"> <value>bbb</value>
         </entry>
    </map>
    </property>
    </bean>

</beans>